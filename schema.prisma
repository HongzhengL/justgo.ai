datasource db {
    provider = "postgresql"
    // Wasp requires that the url is set to the DATABASE_URL environment variable.
    url      = env("DATABASE_URL")
}

// Wasp requires the `prisma-client-js` generator to be present.
generator client {
    provider = "prisma-client-js"
}

// Users table - Simplified for Wasp compatibility
model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    username  String?  @unique
    firstName String?
    lastName  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    itineraries   Itinerary[]
    loginAttempts LoginAttempt[]
    conversations Conversation[]
}

// Itineraries table
model Itinerary {
    id          Int       @id @default(autoincrement())
    userId      Int
    title       String    @default("My Trip")
    description String?
    destination String?
    startDate   DateTime?
    endDate     DateTime?
    budget      Float?
    currency    String    @default("USD")
    isPublic    Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relationships
    user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    items ItineraryItem[]

    @@index([userId])
    @@index([startDate, endDate])
}

// ItineraryItems table
model ItineraryItem {
    id          Int      @id @default(autoincrement())
    itineraryId Int
    cardData    String // JSON string of StandardizedCard data
    orderIndex  Int
    dayNumber   Int? // Which day of the trip
    addedAt     DateTime @default(now())
    notes       String?

    // Relationships
    itinerary Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

    @@index([itineraryId])
    @@index([itineraryId, orderIndex])
}

// LoginAttempts table (for security tracking)
model LoginAttempt {
    id          Int      @id @default(autoincrement())
    userId      Int?
    email       String
    ipAddress   String
    userAgent   String?
    success     Boolean
    attemptedAt DateTime @default(now())

    // Relationships
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([email, attemptedAt])
    @@index([ipAddress, attemptedAt])
}

// Conversation entity for chat persistence
model Conversation {
    id        Int      @id @default(autoincrement())
    userId    Int
    title     String   @default("Travel Planning Session")
    context   String? // JSON string for conversation context
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages Message[]

    @@index([userId, isActive])
}

// Message entity for individual chat messages
model Message {
    id             Int      @id @default(autoincrement())
    conversationId Int
    sender         String // "user" or "ai"
    content        String
    messageType    String   @default("text") // "text", "cards", "system"
    metadata       String? // JSON for search results, etc.
    timestamp      DateTime @default(now())

    // Relationships
    conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@index([conversationId, timestamp])
}
