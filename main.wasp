app aiTravelPlanner {
  wasp: {
    version: "^0.16.6"
  },
  title: "AI Travel Planner",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "AI Travel Planner",
          email: "noreply@aitravelplanner.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
        userSignupFields: import { userSignupFields } from "@src/auth/signupFields.js"
      }
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/dashboard"
  },
  emailSender: {
    provider: SMTP,
    defaultFrom: {
      name: "AI Travel Planner",
      email: "noreply@aitravelplanner.com"
    }
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

// Authentication routes
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/auth/pages/LoginPage.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/auth/pages/SignupPage.jsx"
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/auth/pages/EmailVerificationPage.jsx"
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/auth/pages/PasswordResetPage.jsx"
}

// Dashboard route for authenticated users
route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@src/pages/DashboardPage.jsx",
  authRequired: true
}

// My Itinerary route for authenticated users
route MyItineraryRoute { path: "/my-itinerary", to: MyItineraryPage }
page MyItineraryPage {
  component: import { MyItineraryPage } from "@src/pages/MyItineraryPage.jsx",
  authRequired: true
}

// Travel operations (queries and actions)
query searchFlights {
  fn: import { searchFlights } from "@src/operations/travel.js",
  entities: [User]
}

query searchPlaces {
  fn: import { searchPlaces } from "@src/operations/travel.js",
  entities: [User]
}

query getTransitInfo {
  fn: import { getTransitInfo } from "@src/operations/travel.js",
  entities: [User]
}

// Itinerary operations
query getItineraries {
  fn: import { getItineraries } from "@src/operations/itinerary.js",
  entities: [User, Itinerary, ItineraryItem]
}

query getItinerary {
  fn: import { getItinerary } from "@src/operations/itinerary.js",
  entities: [User, Itinerary, ItineraryItem]
}

action createItinerary {
  fn: import { createItinerary } from "@src/operations/itinerary.js",
  entities: [User, Itinerary]
}

action addToItinerary {
  fn: import { addToItinerary } from "@src/operations/itinerary.js",
  entities: [User, Itinerary, ItineraryItem]
}

action removeFromItinerary {
  fn: import { removeFromItinerary } from "@src/operations/itinerary.js",
  entities: [User, Itinerary, ItineraryItem]
}

// Testing Operations for API Module
action testApiModule {
  fn: import { testApiModule } from "@src/operations/testing.js"
}

action quickApiTest {
  fn: import { quickApiTest } from "@src/operations/testing.js"
}

action checkApiHealth {
  fn: import { checkApiHealth } from "@src/operations/travel.js"
}

action testSpecificOperation {
  fn: import { testSpecificOperation } from "@src/operations/testing.js"
}

action testErrorHandling {
  fn: import { testErrorHandling } from "@src/operations/testing.js"
}

action testPerformance {
  fn: import { testPerformance } from "@src/operations/testing.js"
}

action testWaspIntegration {
  fn: import { testWaspIntegration } from "@src/operations/testing.js"
}

// Conversation operations for AI chat
query getActiveConversation {
  fn: import { getActiveConversation } from "@src/operations/conversation.js",
  entities: [User, Conversation, Message]
}

action processAIMessage {
  fn: import { processAIMessage } from "@src/operations/conversation.js",
  entities: [User, Conversation, Message]
}

query getConversationHistory {
  fn: import { getConversationHistory } from "@src/operations/conversation.js",
  entities: [User, Conversation, Message]
}

action saveMessage {
  fn: import { saveMessage } from "@src/operations/conversation.js",
  entities: [User, Conversation, Message]
}
